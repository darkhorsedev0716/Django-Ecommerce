upstream {{ app_name }}_app_server {
  # fail_timeout=0 means we always retry an upstream even if it failed
  # to return a good HTTP response (in case the Unicorn master nukes a
  # single worker for timing out).

  server unix:{{ user_home }}gunicorn.sock fail_timeout=0;
}

server {
    listen 80;
    server_name {{ host }} www.{{ domain }} {{ domain }};
    return 301 https://www.{{ domain }}$request_uri;
}

server {

    listen   443;
    server_name {{ domain }};

    ssl on;
    ssl_certificate /etc/letsencrypt/live/www.{{ domain }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.{{ domain }}/privkey.pem;

    ssl_session_timeout  10m;

    # https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;

    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    return 301 https://www.{{ domain }}$request_uri;
}

server {

    listen   443;
    server_name www.{{ domain }};

    ssl on;
    ssl_certificate /etc/letsencrypt/live/www.{{ domain }}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/www.{{ domain }}/privkey.pem;

    ssl_session_timeout  10m;

    # https://raymii.org/s/tutorials/Strong_SSL_Security_On_nginx.html
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";
    ssl_prefer_server_ciphers on;
    ssl_session_cache shared:SSL:10m;

    ssl_dhparam /etc/ssl/certs/dhparam.pem;

    add_header Strict-Transport-Security max-age=63072000;
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;

    client_max_body_size 4G;

    access_log /var/log/{{ app_name }}/nginx-access.log;
    error_log /var/log/{{ app_name }}/nginx-error.log;
 
    location /static/ {
        alias   {{ user_home }}static/;
    }
    
    location /media/ {
        alias   {{ user_home }}media/;
    }

    location / {
        if (-f {{ user_home }}/maintenance.flag) {
            return 503;
        }
        # an HTTP header important enough to have its own Wikipedia entry:
        #   http://en.wikipedia.org/wiki/X-Forwarded-For
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

        # enable this if and only if you use HTTPS, this helps Rack
        # set the proper protocol for doing redirects:
        proxy_set_header X-Forwarded-Proto https;

        # pass the Host: header from the client right along so redirects
        # can be set properly within the Rack application
        proxy_set_header Host $http_host;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;

        # set "proxy_buffering off" *only* for Rainbows! when doing
        # Comet/long-poll stuff.  It's also safe to set if you're
        # using only serving fast clients with Unicorn + nginx.
        # Otherwise you _want_ nginx to buffer responses to slow
        # clients, really.
        # proxy_buffering off;

        # Try to serve static files from nginx, no point in making an
        # *application* server like Unicorn/Rainbows! serve static files.
        if (!-f $request_filename) {
            proxy_pass http://{{ app_name }}_app_server;
            break;
        }
        # auth_basic "Restricted";
        # auth_basic_user_file /etc/nginx/.htpasswd;
	# include /etc/nginx/allowed-countries.conf;
    }

    ## Error pages
    #error_page 403 404 405 /404.html;
    #location = /404.html {
    #    root {{ user_home }}{{ app_name }}/{{ app_name }}/templates/;
    #}
    #error_page 500 501 502 504 /500.html;
    #location = /500.html {
    #    root {{ user_home }}{{ app_name }}/{{ app_name }}/templates/;
    #}
    #error_page 503 /503.html;
    #location = /503.html {
    #    root {{ user_home }}{{ app_name }}/{{ app_name }}/templates/;
    #}
}

